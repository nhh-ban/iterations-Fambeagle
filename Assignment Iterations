library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
library(readr)
library(yaml)

#### 1: Beginning of script

# Load function for posting GQL-queries and retrieving data: 
source("GQL_function.r")


# The URL we will use is stored below: 

configs <- 
  read_yaml("vegvesen_configs.yml")


gql_metadata_qry <- read_file("station_metadata.gql")

# Let's try submitting the query: 

stations_metadata <-
  GQL(
    query=gql_metadata_qry,
    .url = configs$vegvesen_url
  ) 


#### 2: Transforming metadata

source("data_transformations.r")
stations_metadata_df <- 
  stations_metadata %>% 
  transform_metadata_to_df(.)

stations_metadata_df

# oh well i failed the test so i needed to go back and fix my function.


#### 3: Testing metadata
source("data_tests.r")

test_stations_metadata(stations_metadata_df)




api <- stations_metadata_df %>% 
  filter(latestData > Sys.Date() - days(7)) %>% 
  sample_n(1) %$% 
  vol_qry(
    id = id,
    from = to_iso8601(latestData, -4),
    to = to_iso8601(latestData, 0)
  ) %>% 
  GQL(., .url = configs$vegvesen_url)



### 5: Final volume query: 
source("vol_qry.r")

stations_metadata_df %>% 
  filter(latestData > Sys.Date() - days(7)) %>% 
  sample_n(1) %$% 
  vol_qry(
    id = id,
    from = to_iso8601(latestData, -4),
    to = to_iso8601(latestData, 0)
  ) %>% 
  GQL(., .url = configs$vegvesen_url) %>%
  transform_volumes() %>% 
  ggplot(aes(x=from, y=volume)) + 
  geom_line() + 
  theme_classic()

# Task 6
# For this task i did not understand what to do, like how am i supposed to find out the station name of the random station?
# I would probably need to match the ID with the station ID that is gather, however i could maybe try and just choose a station
# manually for this task.




